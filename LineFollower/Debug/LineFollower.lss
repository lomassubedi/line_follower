
LineFollower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000618  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000618  000006ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800074  00800074  000006c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000acc  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000781  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000415  00000000  00000000  000019e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000462  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f0  00000000  00000000  00002326  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002716  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  8a:	0c 94 0a 03 	jmp	0x614	; 0x614 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uart_putchar>:
uint8_t sensor_schmmit_trigger(uint16_t sensor_val) {
	if( sensor_val > SENSOR_TRACK_TRUE_VAL) 
		return 1;
	else
		return 0;
}
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	8a 30       	cpi	r24, 0x0A	; 10
  98:	19 f4       	brne	.+6      	; 0xa0 <uart_putchar+0xe>
  9a:	8d e0       	ldi	r24, 0x0D	; 13
  9c:	0e 94 49 00 	call	0x92	; 0x92 <uart_putchar>
  a0:	5d 9b       	sbis	0x0b, 5	; 11
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <uart_putchar+0xe>
  a4:	cc b9       	out	0x0c, r28	; 12
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	cf 91       	pop	r28
  ac:	08 95       	ret

000000ae <init_UART>:
  ae:	83 e3       	ldi	r24, 0x33	; 51
  b0:	89 b9       	out	0x09, r24	; 9
  b2:	10 bc       	out	0x20, r1	; 32
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	88 61       	ori	r24, 0x18	; 24
  b8:	8a b9       	out	0x0a, r24	; 10
  ba:	80 b5       	in	r24, 0x20	; 32
  bc:	86 68       	ori	r24, 0x86	; 134
  be:	80 bd       	out	0x20, r24	; 32
  c0:	08 95       	ret

000000c2 <init_adc>:
  c2:	37 9a       	sbi	0x06, 7	; 6
  c4:	86 b1       	in	r24, 0x06	; 6
  c6:	86 60       	ori	r24, 0x06	; 6
  c8:	86 b9       	out	0x06, r24	; 6
  ca:	3e 9a       	sbi	0x07, 6	; 7
  cc:	3d 98       	cbi	0x07, 5	; 7
  ce:	08 95       	ret

000000d0 <read_adc>:
  d0:	97 b1       	in	r25, 0x07	; 7
  d2:	87 70       	andi	r24, 0x07	; 7
  d4:	98 2b       	or	r25, r24
  d6:	97 b9       	out	0x07, r25	; 7
  d8:	36 9a       	sbi	0x06, 6	; 6
  da:	34 9b       	sbis	0x06, 4	; 6
  dc:	fe cf       	rjmp	.-4      	; 0xda <read_adc+0xa>
  de:	34 9a       	sbi	0x06, 4	; 6
  e0:	87 b1       	in	r24, 0x07	; 7
  e2:	88 7f       	andi	r24, 0xF8	; 248
  e4:	87 b9       	out	0x07, r24	; 7
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	95 b1       	in	r25, 0x05	; 5
  ea:	08 95       	ret

000000ec <init_pwm>:
  ec:	bb 9a       	sbi	0x17, 3	; 23
  ee:	82 e6       	ldi	r24, 0x62	; 98
  f0:	83 bf       	out	0x33, r24	; 51
  f2:	8f 9a       	sbi	0x11, 7	; 17
  f4:	85 bd       	out	0x25, r24	; 37
  f6:	08 95       	ret

000000f8 <main>:

int main(void) {    
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
 100:	a3 97       	sbiw	r28, 0x23	; 35
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
	
	init_UART();
 10c:	0e 94 57 00 	call	0xae	; 0xae <init_UART>
	init_adc();
 110:	0e 94 61 00 	call	0xc2	; 0xc2 <init_adc>
	init_pwm();
 114:	0e 94 76 00 	call	0xec	; 0xec <init_pwm>
	ADCSRA|=(1<<ADIF);					// clearing of ADIF, it is done by writing 1 to it
	ADMUX &= 0b11111000;
	return ADC;
}
void pwm_motor_left(uint8_t duty) {
	OCR2 = duty;
 118:	80 e8       	ldi	r24, 0x80	; 128
 11a:	83 bd       	out	0x23, r24	; 35
	return;
}

void pwm_motor_right(uint8_t duty) {
	OCR0 = duty;
 11c:	8c bf       	out	0x3c, r24	; 60
	pwm_motor_left(128);
	pwm_motor_right(128);
	
	// Setup for pipelining UART data to C standard IO library making printf() work
    static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
    stdout = &mystdout;	
 11e:	80 e6       	ldi	r24, 0x60	; 96
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__data_end+0x3>
 126:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__data_end+0x2>
	
	uint16_t sensor_raw[6];
	uint8_t sensor_digit[6];
	
	char error_weight[] = {-3, -2, -1, 1, 2, 3}; 
 12a:	86 e0       	ldi	r24, 0x06	; 6
 12c:	ee e6       	ldi	r30, 0x6E	; 110
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	de 01       	movw	r26, r28
 132:	53 96       	adiw	r26, 0x13	; 19
 134:	01 90       	ld	r0, Z+
 136:	0d 92       	st	X+, r0
 138:	8a 95       	dec	r24
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x3c>
	float D = 0.0;
	float I = 0.0;
		
	// Correction constants
	uint16_t multiplier = 15;
	float last_error = 0;
 13c:	10 e0       	ldi	r17, 0x00	; 0
 13e:	1d 8e       	std	Y+29, r1	; 0x1d
 140:	41 2c       	mov	r4, r1
 142:	51 2c       	mov	r5, r1
 144:	9e 01       	movw	r18, r28
 146:	2f 5f       	subi	r18, 0xFF	; 255
 148:	3f 4f       	sbci	r19, 0xFF	; 255
 14a:	3a 8f       	std	Y+26, r19	; 0x1a
 14c:	29 8f       	std	Y+25, r18	; 0x19
 14e:	39 8d       	ldd	r19, Y+25	; 0x19
 150:	3e 8f       	std	Y+30, r19	; 0x1e
 152:	4a 8d       	ldd	r20, Y+26	; 0x1a
 154:	4f 8f       	std	Y+31, r20	; 0x1f
 156:	ce 01       	movw	r24, r28
 158:	0d 96       	adiw	r24, 0x0d	; 13
 15a:	9c 8f       	std	Y+28, r25	; 0x1c
 15c:	8b 8f       	std	Y+27, r24	; 0x1b
 15e:	1e 01       	movw	r2, r28
 160:	93 e1       	ldi	r25, 0x13	; 19
 162:	29 0e       	add	r2, r25
 164:	31 1c       	adc	r3, r1
	uint8_t sum_sensor_digit = 0;
	
    while (1) {
		error = 0;
		
		for(uint8_t i = 0; i < 6; i++) {
 166:	eb 8d       	ldd	r30, Y+27	; 0x1b
 168:	e8 a3       	std	Y+32, r30	; 0x20
 16a:	fc 8d       	ldd	r31, Y+28	; 0x1c
 16c:	f9 a3       	std	Y+33, r31	; 0x21
			sensor_raw[i] = read_adc(i);			
		}
		
		for(uint8_t i = 0; i < 6; i++) {
			if(sensor_schmmit_trigger(sensor_raw[i]))
				sensor_digit[i] = 1;				
 16e:	88 24       	eor	r8, r8
 170:	83 94       	inc	r8
		if(correction >= 255) correction = 255;
		
		if(correction <= -255) correction = -255;
		
		pwm_left_motor = basePWM + correction;
		pwm_right_motor = basePWM - correction;
 172:	0f 2e       	mov	r0, r31
 174:	f8 ec       	ldi	r31, 0xC8	; 200
 176:	6f 2e       	mov	r6, r31
 178:	71 2c       	mov	r7, r1
 17a:	f0 2d       	mov	r31, r0
 17c:	7b a2       	std	Y+35, r7	; 0x23
 17e:	6a a2       	std	Y+34, r6	; 0x22
 180:	71 2e       	mov	r7, r17
 182:	04 c0       	rjmp	.+8      	; 0x18c <main+0x94>
		return 1;
	else
		return 0;
}

int main(void) {    
 184:	79 2c       	mov	r7, r9
 186:	ad 8e       	std	Y+29, r10	; 0x1d
 188:	4b 2c       	mov	r4, r11
 18a:	50 2e       	mov	r5, r16
 18c:	9e 01       	movw	r18, r28
 18e:	2f 5f       	subi	r18, 0xFF	; 255
 190:	3f 4f       	sbci	r19, 0xFF	; 255
 192:	79 01       	movw	r14, r18
	float D = 0.0;
	float I = 0.0;
		
	// Correction constants
	uint16_t multiplier = 15;
	float last_error = 0;
 194:	0e 8d       	ldd	r16, Y+30	; 0x1e
 196:	1f 8d       	ldd	r17, Y+31	; 0x1f
	uint8_t sum_sensor_digit = 0;
	
    while (1) {
		error = 0;
		
		for(uint8_t i = 0; i < 6; i++) {
 198:	d1 2c       	mov	r13, r1
 19a:	8d 2d       	mov	r24, r13
 19c:	68 01       	movw	r12, r16
 19e:	18 2f       	mov	r17, r24
			sensor_raw[i] = read_adc(i);			
 1a0:	81 2f       	mov	r24, r17
 1a2:	0e 94 68 00 	call	0xd0	; 0xd0 <read_adc>
 1a6:	f6 01       	movw	r30, r12
 1a8:	81 93       	st	Z+, r24
 1aa:	91 93       	st	Z+, r25
 1ac:	6f 01       	movw	r12, r30
	uint8_t sum_sensor_digit = 0;
	
    while (1) {
		error = 0;
		
		for(uint8_t i = 0; i < 6; i++) {
 1ae:	1f 5f       	subi	r17, 0xFF	; 255
 1b0:	16 30       	cpi	r17, 0x06	; 6
 1b2:	b1 f7       	brne	.-20     	; 0x1a0 <main+0xa8>
 1b4:	de 01       	movw	r26, r28
 1b6:	1d 96       	adiw	r26, 0x0d	; 13
 1b8:	e8 a1       	ldd	r30, Y+32	; 0x20
 1ba:	f9 a1       	ldd	r31, Y+33	; 0x21
 1bc:	10 e0       	ldi	r17, 0x00	; 0
 1be:	9d 01       	movw	r18, r26
 1c0:	d7 01       	movw	r26, r14
			sensor_raw[i] = read_adc(i);			
		}
		
		for(uint8_t i = 0; i < 6; i++) {
			if(sensor_schmmit_trigger(sensor_raw[i]))
 1c2:	8d 91       	ld	r24, X+
 1c4:	9d 91       	ld	r25, X+
 1c6:	83 35       	cpi	r24, 0x53	; 83
 1c8:	93 40       	sbci	r25, 0x03	; 3
 1ca:	10 f0       	brcs	.+4      	; 0x1d0 <main+0xd8>
				sensor_digit[i] = 1;				
 1cc:	80 82       	st	Z, r8
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <main+0xda>
			else
				sensor_digit[i] = 0;	
 1d0:	10 82       	st	Z, r1
			sum_sensor_digit += sensor_digit[i];
 1d2:	81 91       	ld	r24, Z+
 1d4:	18 0f       	add	r17, r24
		
		for(uint8_t i = 0; i < 6; i++) {
			sensor_raw[i] = read_adc(i);			
		}
		
		for(uint8_t i = 0; i < 6; i++) {
 1d6:	e2 15       	cp	r30, r2
 1d8:	f3 05       	cpc	r31, r3
 1da:	99 f7       	brne	.-26     	; 0x1c2 <main+0xca>
 1dc:	d9 01       	movw	r26, r18
 1de:	f1 01       	movw	r30, r2
 1e0:	60 e0       	ldi	r22, 0x00	; 0
				sensor_digit[i] = 0;	
			sum_sensor_digit += sensor_digit[i];
		}
		
		for(uint8_t i = 0; i < 6; i++) {
			if(sensor_digit[i])
 1e2:	8d 91       	ld	r24, X+
 1e4:	88 23       	and	r24, r24
 1e6:	11 f0       	breq	.+4      	; 0x1ec <main+0xf4>
				error += error_weight[i];			
 1e8:	80 81       	ld	r24, Z
 1ea:	68 0f       	add	r22, r24
 1ec:	31 96       	adiw	r30, 0x01	; 1
			else
				sensor_digit[i] = 0;	
			sum_sensor_digit += sensor_digit[i];
		}
		
		for(uint8_t i = 0; i < 6; i++) {
 1ee:	a2 15       	cp	r26, r2
 1f0:	b3 05       	cpc	r27, r3
 1f2:	b9 f7       	brne	.-18     	; 0x1e2 <main+0xea>
			if(sensor_digit[i])
				error += error_weight[i];			
		}
		
		// Calculation of Proportional Component
		P = Kp * error;
 1f4:	06 2e       	mov	r0, r22
 1f6:	00 0c       	add	r0, r0
 1f8:	77 0b       	sbc	r23, r23
 1fa:	88 0b       	sbc	r24, r24
 1fc:	99 0b       	sbc	r25, r25
 1fe:	0e 94 11 02 	call	0x422	; 0x422 <__floatsisf>
 202:	96 2e       	mov	r9, r22
 204:	a7 2e       	mov	r10, r23
 206:	b8 2e       	mov	r11, r24
 208:	09 2f       	mov	r16, r25
 20a:	2a e9       	ldi	r18, 0x9A	; 154
 20c:	39 e9       	ldi	r19, 0x99	; 153
 20e:	49 ed       	ldi	r20, 0xD9	; 217
 210:	5f e3       	ldi	r21, 0x3F	; 63
 212:	0e 94 9d 02 	call	0x53a	; 0x53a <__mulsf3>
		
		// ----------------- PI --------------------
		/*correction = ((int)P  + (int)I) * multiplier;*/		
		
		// ----------------- PID --------------------
		correction = ((int)P  + (int)I + (int)D) * multiplier;		
 216:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fixsfsi>
 21a:	6b 01       	movw	r12, r22
 21c:	7c 01       	movw	r14, r24
		
		// Calculation of Proportional Component
		P = Kp * error;
				
		// Calculation of Integral Component
		I = Ki * (error + last_error);
 21e:	29 2d       	mov	r18, r9
 220:	3a 2d       	mov	r19, r10
 222:	4b 2d       	mov	r20, r11
 224:	50 2f       	mov	r21, r16
 226:	67 2d       	mov	r22, r7
 228:	7d 8d       	ldd	r23, Y+29	; 0x1d
 22a:	84 2d       	mov	r24, r4
 22c:	95 2d       	mov	r25, r5
 22e:	0e 94 6d 01 	call	0x2da	; 0x2da <__addsf3>
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	5f e3       	ldi	r21, 0x3F	; 63
 23a:	0e 94 9d 02 	call	0x53a	; 0x53a <__mulsf3>
		
		// ----------------- PI --------------------
		/*correction = ((int)P  + (int)I) * multiplier;*/		
		
		// ----------------- PID --------------------
		correction = ((int)P  + (int)I + (int)D) * multiplier;		
 23e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fixsfsi>
 242:	c6 0e       	add	r12, r22
 244:	d7 1e       	adc	r13, r23
				
		// Calculation of Integral Component
		I = Ki * (error + last_error);
		
		// Calculation of Derivative Component
		D = Kd * (error - last_error);
 246:	27 2d       	mov	r18, r7
 248:	3d 8d       	ldd	r19, Y+29	; 0x1d
 24a:	44 2d       	mov	r20, r4
 24c:	55 2d       	mov	r21, r5
 24e:	69 2d       	mov	r22, r9
 250:	7a 2d       	mov	r23, r10
 252:	8b 2d       	mov	r24, r11
 254:	90 2f       	mov	r25, r16
 256:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__subsf3>
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	40 e4       	ldi	r20, 0x40	; 64
 260:	50 e4       	ldi	r21, 0x40	; 64
 262:	0e 94 9d 02 	call	0x53a	; 0x53a <__mulsf3>
		
		// ----------------- PI --------------------
		/*correction = ((int)P  + (int)I) * multiplier;*/		
		
		// ----------------- PID --------------------
		correction = ((int)P  + (int)I + (int)D) * multiplier;		
 266:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fixsfsi>
 26a:	6c 0d       	add	r22, r12
 26c:	7d 1d       	adc	r23, r13
 26e:	ef e0       	ldi	r30, 0x0F	; 15
 270:	e6 9f       	mul	r30, r22
 272:	c0 01       	movw	r24, r0
 274:	e7 9f       	mul	r30, r23
 276:	90 0d       	add	r25, r0
 278:	11 24       	eor	r1, r1
		last_error = error;
		
		
		// ----- Apply correction to motors ----- //
		
		if(correction >= 255) correction = 255;
 27a:	8f 3f       	cpi	r24, 0xFF	; 255
 27c:	91 05       	cpc	r25, r1
 27e:	3c f4       	brge	.+14     	; 0x28e <main+0x196>
		
		if(correction <= -255) correction = -255;
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	ff ef       	ldi	r31, 0xFF	; 255
 284:	9f 07       	cpc	r25, r31
 286:	2c f4       	brge	.+10     	; 0x292 <main+0x19a>
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	9f ef       	ldi	r25, 0xFF	; 255
 28c:	02 c0       	rjmp	.+4      	; 0x292 <main+0x19a>
		last_error = error;
		
		
		// ----- Apply correction to motors ----- //
		
		if(correction >= 255) correction = 255;
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	90 e0       	ldi	r25, 0x00	; 0
		if(pwm_right_motor > 255) pwm_right_motor = 255;
		
		if(pwm_left_motor < 0) pwm_left_motor = 0;
		if(pwm_right_motor < 0) pwm_right_motor = 0;
		
		if(sum_sensor_digit) {
 292:	11 23       	and	r17, r17
 294:	e9 f0       	breq	.+58     	; 0x2d0 <main+0x1d8>
 296:	9c 01       	movw	r18, r24
 298:	28 53       	subi	r18, 0x38	; 56
 29a:	3f 4f       	sbci	r19, 0xFF	; 255
 29c:	2f 3f       	cpi	r18, 0xFF	; 255
 29e:	31 05       	cpc	r19, r1
 2a0:	19 f0       	breq	.+6      	; 0x2a8 <main+0x1b0>
 2a2:	14 f0       	brlt	.+4      	; 0x2a8 <main+0x1b0>
 2a4:	2f ef       	ldi	r18, 0xFF	; 255
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	33 23       	and	r19, r19
 2aa:	0c f4       	brge	.+2      	; 0x2ae <main+0x1b6>
 2ac:	20 e0       	ldi	r18, 0x00	; 0
	ADCSRA|=(1<<ADIF);					// clearing of ADIF, it is done by writing 1 to it
	ADMUX &= 0b11111000;
	return ADC;
}
void pwm_motor_left(uint8_t duty) {
	OCR2 = duty;
 2ae:	23 bd       	out	0x23, r18	; 35
 2b0:	2a a1       	ldd	r18, Y+34	; 0x22
 2b2:	3b a1       	ldd	r19, Y+35	; 0x23
 2b4:	28 1b       	sub	r18, r24
 2b6:	39 0b       	sbc	r19, r25
 2b8:	c9 01       	movw	r24, r18
 2ba:	2f 3f       	cpi	r18, 0xFF	; 255
 2bc:	31 05       	cpc	r19, r1
 2be:	19 f0       	breq	.+6      	; 0x2c6 <main+0x1ce>
 2c0:	14 f0       	brlt	.+4      	; 0x2c6 <main+0x1ce>
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	99 23       	and	r25, r25
 2c8:	0c f4       	brge	.+2      	; 0x2cc <main+0x1d4>
 2ca:	80 e0       	ldi	r24, 0x00	; 0
	return;
}

void pwm_motor_right(uint8_t duty) {
	OCR0 = duty;
 2cc:	8c bf       	out	0x3c, r24	; 60
 2ce:	5a cf       	rjmp	.-332    	; 0x184 <main+0x8c>
	ADCSRA|=(1<<ADIF);					// clearing of ADIF, it is done by writing 1 to it
	ADMUX &= 0b11111000;
	return ADC;
}
void pwm_motor_left(uint8_t duty) {
	OCR2 = duty;
 2d0:	30 e8       	ldi	r19, 0x80	; 128
 2d2:	33 bd       	out	0x23, r19	; 35
	return;
}

void pwm_motor_right(uint8_t duty) {
	OCR0 = duty;
 2d4:	3c bf       	out	0x3c, r19	; 60
 2d6:	56 cf       	rjmp	.-340    	; 0x184 <main+0x8c>

000002d8 <__subsf3>:
 2d8:	50 58       	subi	r21, 0x80	; 128

000002da <__addsf3>:
 2da:	bb 27       	eor	r27, r27
 2dc:	aa 27       	eor	r26, r26
 2de:	0e 94 84 01 	call	0x308	; 0x308 <__addsf3x>
 2e2:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__fp_round>
 2e6:	0e 94 55 02 	call	0x4aa	; 0x4aa <__fp_pscA>
 2ea:	38 f0       	brcs	.+14     	; 0x2fa <__addsf3+0x20>
 2ec:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__fp_pscB>
 2f0:	20 f0       	brcs	.+8      	; 0x2fa <__addsf3+0x20>
 2f2:	39 f4       	brne	.+14     	; 0x302 <__addsf3+0x28>
 2f4:	9f 3f       	cpi	r25, 0xFF	; 255
 2f6:	19 f4       	brne	.+6      	; 0x2fe <__addsf3+0x24>
 2f8:	26 f4       	brtc	.+8      	; 0x302 <__addsf3+0x28>
 2fa:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__fp_nan>
 2fe:	0e f4       	brtc	.+2      	; 0x302 <__addsf3+0x28>
 300:	e0 95       	com	r30
 302:	e7 fb       	bst	r30, 7
 304:	0c 94 4c 02 	jmp	0x498	; 0x498 <__fp_inf>

00000308 <__addsf3x>:
 308:	e9 2f       	mov	r30, r25
 30a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__fp_split3>
 30e:	58 f3       	brcs	.-42     	; 0x2e6 <__addsf3+0xc>
 310:	ba 17       	cp	r27, r26
 312:	62 07       	cpc	r22, r18
 314:	73 07       	cpc	r23, r19
 316:	84 07       	cpc	r24, r20
 318:	95 07       	cpc	r25, r21
 31a:	20 f0       	brcs	.+8      	; 0x324 <__addsf3x+0x1c>
 31c:	79 f4       	brne	.+30     	; 0x33c <__addsf3x+0x34>
 31e:	a6 f5       	brtc	.+104    	; 0x388 <__addsf3x+0x80>
 320:	0c 94 96 02 	jmp	0x52c	; 0x52c <__fp_zero>
 324:	0e f4       	brtc	.+2      	; 0x328 <__addsf3x+0x20>
 326:	e0 95       	com	r30
 328:	0b 2e       	mov	r0, r27
 32a:	ba 2f       	mov	r27, r26
 32c:	a0 2d       	mov	r26, r0
 32e:	0b 01       	movw	r0, r22
 330:	b9 01       	movw	r22, r18
 332:	90 01       	movw	r18, r0
 334:	0c 01       	movw	r0, r24
 336:	ca 01       	movw	r24, r20
 338:	a0 01       	movw	r20, r0
 33a:	11 24       	eor	r1, r1
 33c:	ff 27       	eor	r31, r31
 33e:	59 1b       	sub	r21, r25
 340:	99 f0       	breq	.+38     	; 0x368 <__addsf3x+0x60>
 342:	59 3f       	cpi	r21, 0xF9	; 249
 344:	50 f4       	brcc	.+20     	; 0x35a <__addsf3x+0x52>
 346:	50 3e       	cpi	r21, 0xE0	; 224
 348:	68 f1       	brcs	.+90     	; 0x3a4 <__addsf3x+0x9c>
 34a:	1a 16       	cp	r1, r26
 34c:	f0 40       	sbci	r31, 0x00	; 0
 34e:	a2 2f       	mov	r26, r18
 350:	23 2f       	mov	r18, r19
 352:	34 2f       	mov	r19, r20
 354:	44 27       	eor	r20, r20
 356:	58 5f       	subi	r21, 0xF8	; 248
 358:	f3 cf       	rjmp	.-26     	; 0x340 <__addsf3x+0x38>
 35a:	46 95       	lsr	r20
 35c:	37 95       	ror	r19
 35e:	27 95       	ror	r18
 360:	a7 95       	ror	r26
 362:	f0 40       	sbci	r31, 0x00	; 0
 364:	53 95       	inc	r21
 366:	c9 f7       	brne	.-14     	; 0x35a <__addsf3x+0x52>
 368:	7e f4       	brtc	.+30     	; 0x388 <__addsf3x+0x80>
 36a:	1f 16       	cp	r1, r31
 36c:	ba 0b       	sbc	r27, r26
 36e:	62 0b       	sbc	r22, r18
 370:	73 0b       	sbc	r23, r19
 372:	84 0b       	sbc	r24, r20
 374:	ba f0       	brmi	.+46     	; 0x3a4 <__addsf3x+0x9c>
 376:	91 50       	subi	r25, 0x01	; 1
 378:	a1 f0       	breq	.+40     	; 0x3a2 <__addsf3x+0x9a>
 37a:	ff 0f       	add	r31, r31
 37c:	bb 1f       	adc	r27, r27
 37e:	66 1f       	adc	r22, r22
 380:	77 1f       	adc	r23, r23
 382:	88 1f       	adc	r24, r24
 384:	c2 f7       	brpl	.-16     	; 0x376 <__addsf3x+0x6e>
 386:	0e c0       	rjmp	.+28     	; 0x3a4 <__addsf3x+0x9c>
 388:	ba 0f       	add	r27, r26
 38a:	62 1f       	adc	r22, r18
 38c:	73 1f       	adc	r23, r19
 38e:	84 1f       	adc	r24, r20
 390:	48 f4       	brcc	.+18     	; 0x3a4 <__addsf3x+0x9c>
 392:	87 95       	ror	r24
 394:	77 95       	ror	r23
 396:	67 95       	ror	r22
 398:	b7 95       	ror	r27
 39a:	f7 95       	ror	r31
 39c:	9e 3f       	cpi	r25, 0xFE	; 254
 39e:	08 f0       	brcs	.+2      	; 0x3a2 <__addsf3x+0x9a>
 3a0:	b0 cf       	rjmp	.-160    	; 0x302 <__addsf3+0x28>
 3a2:	93 95       	inc	r25
 3a4:	88 0f       	add	r24, r24
 3a6:	08 f0       	brcs	.+2      	; 0x3aa <__addsf3x+0xa2>
 3a8:	99 27       	eor	r25, r25
 3aa:	ee 0f       	add	r30, r30
 3ac:	97 95       	ror	r25
 3ae:	87 95       	ror	r24
 3b0:	08 95       	ret

000003b2 <__fixsfsi>:
 3b2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__fixunssfsi>
 3b6:	68 94       	set
 3b8:	b1 11       	cpse	r27, r1
 3ba:	0c 94 97 02 	jmp	0x52e	; 0x52e <__fp_szero>
 3be:	08 95       	ret

000003c0 <__fixunssfsi>:
 3c0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__fp_splitA>
 3c4:	88 f0       	brcs	.+34     	; 0x3e8 <__fixunssfsi+0x28>
 3c6:	9f 57       	subi	r25, 0x7F	; 127
 3c8:	98 f0       	brcs	.+38     	; 0x3f0 <__fixunssfsi+0x30>
 3ca:	b9 2f       	mov	r27, r25
 3cc:	99 27       	eor	r25, r25
 3ce:	b7 51       	subi	r27, 0x17	; 23
 3d0:	b0 f0       	brcs	.+44     	; 0x3fe <__fixunssfsi+0x3e>
 3d2:	e1 f0       	breq	.+56     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3d4:	66 0f       	add	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	88 1f       	adc	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	1a f0       	brmi	.+6      	; 0x3e4 <__fixunssfsi+0x24>
 3de:	ba 95       	dec	r27
 3e0:	c9 f7       	brne	.-14     	; 0x3d4 <__fixunssfsi+0x14>
 3e2:	14 c0       	rjmp	.+40     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3e4:	b1 30       	cpi	r27, 0x01	; 1
 3e6:	91 f0       	breq	.+36     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3e8:	0e 94 96 02 	call	0x52c	; 0x52c <__fp_zero>
 3ec:	b1 e0       	ldi	r27, 0x01	; 1
 3ee:	08 95       	ret
 3f0:	0c 94 96 02 	jmp	0x52c	; 0x52c <__fp_zero>
 3f4:	67 2f       	mov	r22, r23
 3f6:	78 2f       	mov	r23, r24
 3f8:	88 27       	eor	r24, r24
 3fa:	b8 5f       	subi	r27, 0xF8	; 248
 3fc:	39 f0       	breq	.+14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3fe:	b9 3f       	cpi	r27, 0xF9	; 249
 400:	cc f3       	brlt	.-14     	; 0x3f4 <__fixunssfsi+0x34>
 402:	86 95       	lsr	r24
 404:	77 95       	ror	r23
 406:	67 95       	ror	r22
 408:	b3 95       	inc	r27
 40a:	d9 f7       	brne	.-10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 40c:	3e f4       	brtc	.+14     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 40e:	90 95       	com	r25
 410:	80 95       	com	r24
 412:	70 95       	com	r23
 414:	61 95       	neg	r22
 416:	7f 4f       	sbci	r23, 0xFF	; 255
 418:	8f 4f       	sbci	r24, 0xFF	; 255
 41a:	9f 4f       	sbci	r25, 0xFF	; 255
 41c:	08 95       	ret

0000041e <__floatunsisf>:
 41e:	e8 94       	clt
 420:	09 c0       	rjmp	.+18     	; 0x434 <__floatsisf+0x12>

00000422 <__floatsisf>:
 422:	97 fb       	bst	r25, 7
 424:	3e f4       	brtc	.+14     	; 0x434 <__floatsisf+0x12>
 426:	90 95       	com	r25
 428:	80 95       	com	r24
 42a:	70 95       	com	r23
 42c:	61 95       	neg	r22
 42e:	7f 4f       	sbci	r23, 0xFF	; 255
 430:	8f 4f       	sbci	r24, 0xFF	; 255
 432:	9f 4f       	sbci	r25, 0xFF	; 255
 434:	99 23       	and	r25, r25
 436:	a9 f0       	breq	.+42     	; 0x462 <__stack+0x3>
 438:	f9 2f       	mov	r31, r25
 43a:	96 e9       	ldi	r25, 0x96	; 150
 43c:	bb 27       	eor	r27, r27
 43e:	93 95       	inc	r25
 440:	f6 95       	lsr	r31
 442:	87 95       	ror	r24
 444:	77 95       	ror	r23
 446:	67 95       	ror	r22
 448:	b7 95       	ror	r27
 44a:	f1 11       	cpse	r31, r1
 44c:	f8 cf       	rjmp	.-16     	; 0x43e <__floatsisf+0x1c>
 44e:	fa f4       	brpl	.+62     	; 0x48e <__stack+0x2f>
 450:	bb 0f       	add	r27, r27
 452:	11 f4       	brne	.+4      	; 0x458 <__floatsisf+0x36>
 454:	60 ff       	sbrs	r22, 0
 456:	1b c0       	rjmp	.+54     	; 0x48e <__stack+0x2f>
 458:	6f 5f       	subi	r22, 0xFF	; 255
 45a:	7f 4f       	sbci	r23, 0xFF	; 255
 45c:	8f 4f       	sbci	r24, 0xFF	; 255
 45e:	9f 4f       	sbci	r25, 0xFF	; 255
 460:	16 c0       	rjmp	.+44     	; 0x48e <__stack+0x2f>
 462:	88 23       	and	r24, r24
 464:	11 f0       	breq	.+4      	; 0x46a <__stack+0xb>
 466:	96 e9       	ldi	r25, 0x96	; 150
 468:	11 c0       	rjmp	.+34     	; 0x48c <__stack+0x2d>
 46a:	77 23       	and	r23, r23
 46c:	21 f0       	breq	.+8      	; 0x476 <__stack+0x17>
 46e:	9e e8       	ldi	r25, 0x8E	; 142
 470:	87 2f       	mov	r24, r23
 472:	76 2f       	mov	r23, r22
 474:	05 c0       	rjmp	.+10     	; 0x480 <__stack+0x21>
 476:	66 23       	and	r22, r22
 478:	71 f0       	breq	.+28     	; 0x496 <__stack+0x37>
 47a:	96 e8       	ldi	r25, 0x86	; 134
 47c:	86 2f       	mov	r24, r22
 47e:	70 e0       	ldi	r23, 0x00	; 0
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	2a f0       	brmi	.+10     	; 0x48e <__stack+0x2f>
 484:	9a 95       	dec	r25
 486:	66 0f       	add	r22, r22
 488:	77 1f       	adc	r23, r23
 48a:	88 1f       	adc	r24, r24
 48c:	da f7       	brpl	.-10     	; 0x484 <__stack+0x25>
 48e:	88 0f       	add	r24, r24
 490:	96 95       	lsr	r25
 492:	87 95       	ror	r24
 494:	97 f9       	bld	r25, 7
 496:	08 95       	ret

00000498 <__fp_inf>:
 498:	97 f9       	bld	r25, 7
 49a:	9f 67       	ori	r25, 0x7F	; 127
 49c:	80 e8       	ldi	r24, 0x80	; 128
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	08 95       	ret

000004a4 <__fp_nan>:
 4a4:	9f ef       	ldi	r25, 0xFF	; 255
 4a6:	80 ec       	ldi	r24, 0xC0	; 192
 4a8:	08 95       	ret

000004aa <__fp_pscA>:
 4aa:	00 24       	eor	r0, r0
 4ac:	0a 94       	dec	r0
 4ae:	16 16       	cp	r1, r22
 4b0:	17 06       	cpc	r1, r23
 4b2:	18 06       	cpc	r1, r24
 4b4:	09 06       	cpc	r0, r25
 4b6:	08 95       	ret

000004b8 <__fp_pscB>:
 4b8:	00 24       	eor	r0, r0
 4ba:	0a 94       	dec	r0
 4bc:	12 16       	cp	r1, r18
 4be:	13 06       	cpc	r1, r19
 4c0:	14 06       	cpc	r1, r20
 4c2:	05 06       	cpc	r0, r21
 4c4:	08 95       	ret

000004c6 <__fp_round>:
 4c6:	09 2e       	mov	r0, r25
 4c8:	03 94       	inc	r0
 4ca:	00 0c       	add	r0, r0
 4cc:	11 f4       	brne	.+4      	; 0x4d2 <__fp_round+0xc>
 4ce:	88 23       	and	r24, r24
 4d0:	52 f0       	brmi	.+20     	; 0x4e6 <__fp_round+0x20>
 4d2:	bb 0f       	add	r27, r27
 4d4:	40 f4       	brcc	.+16     	; 0x4e6 <__fp_round+0x20>
 4d6:	bf 2b       	or	r27, r31
 4d8:	11 f4       	brne	.+4      	; 0x4de <__fp_round+0x18>
 4da:	60 ff       	sbrs	r22, 0
 4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <__fp_round+0x20>
 4de:	6f 5f       	subi	r22, 0xFF	; 255
 4e0:	7f 4f       	sbci	r23, 0xFF	; 255
 4e2:	8f 4f       	sbci	r24, 0xFF	; 255
 4e4:	9f 4f       	sbci	r25, 0xFF	; 255
 4e6:	08 95       	ret

000004e8 <__fp_split3>:
 4e8:	57 fd       	sbrc	r21, 7
 4ea:	90 58       	subi	r25, 0x80	; 128
 4ec:	44 0f       	add	r20, r20
 4ee:	55 1f       	adc	r21, r21
 4f0:	59 f0       	breq	.+22     	; 0x508 <__fp_splitA+0x10>
 4f2:	5f 3f       	cpi	r21, 0xFF	; 255
 4f4:	71 f0       	breq	.+28     	; 0x512 <__fp_splitA+0x1a>
 4f6:	47 95       	ror	r20

000004f8 <__fp_splitA>:
 4f8:	88 0f       	add	r24, r24
 4fa:	97 fb       	bst	r25, 7
 4fc:	99 1f       	adc	r25, r25
 4fe:	61 f0       	breq	.+24     	; 0x518 <__fp_splitA+0x20>
 500:	9f 3f       	cpi	r25, 0xFF	; 255
 502:	79 f0       	breq	.+30     	; 0x522 <__fp_splitA+0x2a>
 504:	87 95       	ror	r24
 506:	08 95       	ret
 508:	12 16       	cp	r1, r18
 50a:	13 06       	cpc	r1, r19
 50c:	14 06       	cpc	r1, r20
 50e:	55 1f       	adc	r21, r21
 510:	f2 cf       	rjmp	.-28     	; 0x4f6 <__fp_split3+0xe>
 512:	46 95       	lsr	r20
 514:	f1 df       	rcall	.-30     	; 0x4f8 <__fp_splitA>
 516:	08 c0       	rjmp	.+16     	; 0x528 <__fp_splitA+0x30>
 518:	16 16       	cp	r1, r22
 51a:	17 06       	cpc	r1, r23
 51c:	18 06       	cpc	r1, r24
 51e:	99 1f       	adc	r25, r25
 520:	f1 cf       	rjmp	.-30     	; 0x504 <__fp_splitA+0xc>
 522:	86 95       	lsr	r24
 524:	71 05       	cpc	r23, r1
 526:	61 05       	cpc	r22, r1
 528:	08 94       	sec
 52a:	08 95       	ret

0000052c <__fp_zero>:
 52c:	e8 94       	clt

0000052e <__fp_szero>:
 52e:	bb 27       	eor	r27, r27
 530:	66 27       	eor	r22, r22
 532:	77 27       	eor	r23, r23
 534:	cb 01       	movw	r24, r22
 536:	97 f9       	bld	r25, 7
 538:	08 95       	ret

0000053a <__mulsf3>:
 53a:	0e 94 b0 02 	call	0x560	; 0x560 <__mulsf3x>
 53e:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__fp_round>
 542:	0e 94 55 02 	call	0x4aa	; 0x4aa <__fp_pscA>
 546:	38 f0       	brcs	.+14     	; 0x556 <__mulsf3+0x1c>
 548:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__fp_pscB>
 54c:	20 f0       	brcs	.+8      	; 0x556 <__mulsf3+0x1c>
 54e:	95 23       	and	r25, r21
 550:	11 f0       	breq	.+4      	; 0x556 <__mulsf3+0x1c>
 552:	0c 94 4c 02 	jmp	0x498	; 0x498 <__fp_inf>
 556:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__fp_nan>
 55a:	11 24       	eor	r1, r1
 55c:	0c 94 97 02 	jmp	0x52e	; 0x52e <__fp_szero>

00000560 <__mulsf3x>:
 560:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__fp_split3>
 564:	70 f3       	brcs	.-36     	; 0x542 <__mulsf3+0x8>

00000566 <__mulsf3_pse>:
 566:	95 9f       	mul	r25, r21
 568:	c1 f3       	breq	.-16     	; 0x55a <__mulsf3+0x20>
 56a:	95 0f       	add	r25, r21
 56c:	50 e0       	ldi	r21, 0x00	; 0
 56e:	55 1f       	adc	r21, r21
 570:	62 9f       	mul	r22, r18
 572:	f0 01       	movw	r30, r0
 574:	72 9f       	mul	r23, r18
 576:	bb 27       	eor	r27, r27
 578:	f0 0d       	add	r31, r0
 57a:	b1 1d       	adc	r27, r1
 57c:	63 9f       	mul	r22, r19
 57e:	aa 27       	eor	r26, r26
 580:	f0 0d       	add	r31, r0
 582:	b1 1d       	adc	r27, r1
 584:	aa 1f       	adc	r26, r26
 586:	64 9f       	mul	r22, r20
 588:	66 27       	eor	r22, r22
 58a:	b0 0d       	add	r27, r0
 58c:	a1 1d       	adc	r26, r1
 58e:	66 1f       	adc	r22, r22
 590:	82 9f       	mul	r24, r18
 592:	22 27       	eor	r18, r18
 594:	b0 0d       	add	r27, r0
 596:	a1 1d       	adc	r26, r1
 598:	62 1f       	adc	r22, r18
 59a:	73 9f       	mul	r23, r19
 59c:	b0 0d       	add	r27, r0
 59e:	a1 1d       	adc	r26, r1
 5a0:	62 1f       	adc	r22, r18
 5a2:	83 9f       	mul	r24, r19
 5a4:	a0 0d       	add	r26, r0
 5a6:	61 1d       	adc	r22, r1
 5a8:	22 1f       	adc	r18, r18
 5aa:	74 9f       	mul	r23, r20
 5ac:	33 27       	eor	r19, r19
 5ae:	a0 0d       	add	r26, r0
 5b0:	61 1d       	adc	r22, r1
 5b2:	23 1f       	adc	r18, r19
 5b4:	84 9f       	mul	r24, r20
 5b6:	60 0d       	add	r22, r0
 5b8:	21 1d       	adc	r18, r1
 5ba:	82 2f       	mov	r24, r18
 5bc:	76 2f       	mov	r23, r22
 5be:	6a 2f       	mov	r22, r26
 5c0:	11 24       	eor	r1, r1
 5c2:	9f 57       	subi	r25, 0x7F	; 127
 5c4:	50 40       	sbci	r21, 0x00	; 0
 5c6:	9a f0       	brmi	.+38     	; 0x5ee <__mulsf3_pse+0x88>
 5c8:	f1 f0       	breq	.+60     	; 0x606 <__mulsf3_pse+0xa0>
 5ca:	88 23       	and	r24, r24
 5cc:	4a f0       	brmi	.+18     	; 0x5e0 <__mulsf3_pse+0x7a>
 5ce:	ee 0f       	add	r30, r30
 5d0:	ff 1f       	adc	r31, r31
 5d2:	bb 1f       	adc	r27, r27
 5d4:	66 1f       	adc	r22, r22
 5d6:	77 1f       	adc	r23, r23
 5d8:	88 1f       	adc	r24, r24
 5da:	91 50       	subi	r25, 0x01	; 1
 5dc:	50 40       	sbci	r21, 0x00	; 0
 5de:	a9 f7       	brne	.-22     	; 0x5ca <__mulsf3_pse+0x64>
 5e0:	9e 3f       	cpi	r25, 0xFE	; 254
 5e2:	51 05       	cpc	r21, r1
 5e4:	80 f0       	brcs	.+32     	; 0x606 <__mulsf3_pse+0xa0>
 5e6:	0c 94 4c 02 	jmp	0x498	; 0x498 <__fp_inf>
 5ea:	0c 94 97 02 	jmp	0x52e	; 0x52e <__fp_szero>
 5ee:	5f 3f       	cpi	r21, 0xFF	; 255
 5f0:	e4 f3       	brlt	.-8      	; 0x5ea <__mulsf3_pse+0x84>
 5f2:	98 3e       	cpi	r25, 0xE8	; 232
 5f4:	d4 f3       	brlt	.-12     	; 0x5ea <__mulsf3_pse+0x84>
 5f6:	86 95       	lsr	r24
 5f8:	77 95       	ror	r23
 5fa:	67 95       	ror	r22
 5fc:	b7 95       	ror	r27
 5fe:	f7 95       	ror	r31
 600:	e7 95       	ror	r30
 602:	9f 5f       	subi	r25, 0xFF	; 255
 604:	c1 f7       	brne	.-16     	; 0x5f6 <__mulsf3_pse+0x90>
 606:	fe 2b       	or	r31, r30
 608:	88 0f       	add	r24, r24
 60a:	91 1d       	adc	r25, r1
 60c:	96 95       	lsr	r25
 60e:	87 95       	ror	r24
 610:	97 f9       	bld	r25, 7
 612:	08 95       	ret

00000614 <_exit>:
 614:	f8 94       	cli

00000616 <__stop_program>:
 616:	ff cf       	rjmp	.-2      	; 0x616 <__stop_program>
